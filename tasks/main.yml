---
- name: Gather Keycloak PVCs
  command: >
    oc get pvc -n {{ namespace }} -l postgres-operator.crunchydata.com/cluster=keycloak -o json
  register: keycloak_pvcs_raw

- name: Set fact with parsed PVCs
  set_fact:
    keycloak_pvcs: "{{ (keycloak_pvcs_raw.stdout | from_json)['items'] }}"

- name: Patch all Keycloak PVCs to increase storage
  command: >
    oc patch pvc {{ item.metadata.name }}
    -n {{ namespace }}
    --type=merge
    -p '{"spec": {"resources": {"requests": {"storage": "{{ new_size }}"}}}}'
  loop: "{{ keycloak_pvcs }}"
  loop_control:
    label: "{{ item.metadata.name }}"

- name: Wait for PVC resize to reflect
  shell: >
    oc get pvc {{ item.metadata.name }} -n {{ namespace }} -o json | jq -r '.status.capacity.storage'
  register: pvc_capacity
  until: pvc_capacity.stdout == new_size
  retries: 15
  delay: 10
  loop: "{{ keycloak_pvcs }}"
  loop_control:
    label: "{{ item.metadata.name }}"

- name: Gather Keycloak pods
  command: >
    oc get pods -n {{ namespace }} -l postgres-operator.crunchydata.com/cluster=keycloak -o json
  register: keycloak_pods_raw

- name: Set fact with parsed pods
  set_fact:
    keycloak_pods: "{{ (keycloak_pods_raw.stdout | from_json)['items'] }}"

- name: Delete Keycloak pods to pick up new PVC size
  command: >
    oc delete pod {{ item.metadata.name }} -n {{ namespace }}
  loop: "{{ keycloak_pods }}"
  loop_control:
    label: "{{ item.metadata.name }}"

- name: Wait for pods to be running again
  shell: >
    oc get pod {{ item.metadata.name }} -n {{ namespace }} -o json | jq -r '.status.phase'
  register: pod_status
  until: pod_status.stdout == "Running"
  retries: 20
  delay: 15
  loop: "{{ keycloak_pods }}"
  loop_control:
    label: "{{ item.metadata.name }}"

- name: Show final PVC and pod status
  block:
    - name: PVC status
      command: oc get pvc -n {{ namespace }}

    - name: Pods status
      command: oc get pods -n {{ namespace }}

- name: Patch the OpenShift Console resource to set logoutRedirect
  command: >
    oc patch console cluster
    --type=merge
    -p '{"spec": {"authentication": {"logoutRedirect": "{{ logout_redirect_url }}"}}}'
  register: patch_result

- name: Show patch result
  debug:
    var: patch_result.stdout

- name: Apply KeycloakRealmImport custom resource
  copy:
    dest: /tmp/keycloak_realm_import.yaml
    content: |
      apiVersion: k8s.keycloak.org/v2alpha1
      kind: KeycloakRealmImport
      metadata:
        name: trusted-artifact-signer
        namespace: tssc-keycloak
      spec:
        keycloakCRName: keycloak
        realm:
          id: trusted-artifact-signer
          realm: trusted-artifact-signer
          displayName: "Trusted Artifact Signer"
          enabled: true
          clients:
            - clientId: ocp4_workload_advanced_developer_suite_openshift_keycloak_client_id
              enabled: true
              protocol: openid-connect
              redirectUris:
                - "{{ ocp_console_url }}/*"
              attributes:
                post.logout.redirect.uris: "{{ ocp_console_url }}"

- name: Apply KeycloakRealmImport using oc
  command: >
    oc apply -f /tmp/keycloak_realm_import.yaml
